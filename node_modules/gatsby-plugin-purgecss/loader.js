'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // modified from https://github.com/americanexpress/purgecss-loader

/**
 * @typedef {import('webpack').loader.LoaderContext} LoaderContext
 * @typedef {object} OptionObject
 * @property {boolean} OptionObject.rejected
 * @property {string[]} OptionObject.content
 * @property {string[]} OptionObject.ignore
 * @property {boolean} OptionObject.debug
 * @property {boolean} OptionObject.printRejected
 * @property {boolean} OptionObject.whitelist
 * @property {boolean} OptionObject.printAll
 */

exports.default = loader;

var _purgecss = require('purgecss');

var _purgecss2 = _interopRequireDefault(_purgecss);

var _loaderUtils = require('loader-utils');

var _shared = require('./shared');

var _utils = require('./utils');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Purgecss Loader
 * @this {LoaderContext & {rootContext:string}}
 * @param {string} source
 */
function loader(source) {
  const options = /** @type {OptionObject} */(0, _loaderUtils.getOptions)(this);

  if (options.rejected) {
    _shared.stats.addSize(source);
  }

  if (Array.isArray(options.ignore)) {
    const relativePath = this.resourcePath.replace(_path2.default.normalize(this.rootContext), '');
    const normalizedPath = relativePath.split(_path2.default.sep).join('/');

    if (options.ignore.some(file => normalizedPath.includes(file))) {
      console.log('\ngatsby-plugin-purgecss: Ignored ', this.resourcePath);
      return source;
    }
  }

  let css;
  try {
    // @ts-ignore
    css = new _purgecss2.default(_extends({
      css: [{ raw: source }]
    }, options)).purge();
  } catch (error) {
    console.log('\ngatsby-plugin-purgecss: Could not parse file, skipping. Your build will not break.\n', this.resourcePath);

    if (options.debug) {
      _shared.Debug.writeAppendError(error);
    } else {
      console.log('Use debug option to investigate further.');
    }

    return source;
  }

  if (options.rejected) {
    const rejected = css[0].rejected;

    _shared.stats.add(rejected.length);
    _shared.stats.addRemovedSize(css[0].css);

    if (options.printRejected && Array.isArray(rejected)) {
      const filtered = rejected.map(val => {
        return val.replace('\n', '');
      });
      console.log(_utils.color.FgGreen, '\nFrom: ', this.resourcePath);
      console.log(_utils.color.Reset, 'Removed Selectors: ', options.printAll ? JSON.stringify(filtered) : filtered);
    }
  }

  return css[0].css;
}